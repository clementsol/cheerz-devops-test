name: Build and deploy cheerz-devops-test

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  IMAGE_NAME: cheerz-devops-test
  IMAGE_PORT: 8080
  SERVICE_NAME: csol-cheerz

jobs:
  build-and-deploy:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build app with Gradle
        run: ./gradlew build -PprojVersion=${{ github.ref_name }}

      - name: Extract JAR contents for Docker layering
        run: |
          mkdir -p build/dependency
          cd build/dependency
          jar -xf ../libs/cheerz-devops-test-${{ github.ref_name }}.jar

      - name: Authenticate to Google Cloud
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account: ${{ secrets.GCP_SA }}
          workload_identity_provider: ${{ secrets.GCP_WL_ID_PROVIDER }}

      - name: Authenticate Docker to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}
          registry: ${{ secrets.GCP_AR_LOC }}-docker.pkg.dev

      - name: Build and push Docker image to Artifact Registry
        run: |
          docker build -t "${{ secrets.GCP_AR_URL }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" .
          docker push "${{ secrets.GCP_AR_URL }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"

      - name: Deploy to Cloud Run
        id: cloudrun-deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ secrets.GCP_AR_URL }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          region: ${{ secrets.GCP_AR_LOC }}
          flags: |
            --port=${{ env.IMAGE_PORT }}
            --no-invoker-iam-check

      - name: Output Cloud Run URL
        run: echo "Cloud Run service deployed at ${{ steps.cloudrun-deploy.outputs.url }}"
